//crudcrud.com endpoint (which can be modified)
const crudcrudEndpoint = "b0ea14d6fc604ac49b12988b1e50367e";

//grab from elements from the html file
const form = document.getElementById('my-form');
const userList = document.getElementById('users'); //ul
const nameInput = document.getElementById('name');
const emailInput = document.getElementById('email');
const phoneNumberInput = document.getElementById('phoneNumber');
const errorMessage = document.querySelector('.err-msg');

//store user details
function storeUserDetails(e){
    e.preventDefault();
    //get userName, userEmail, userPhoneNumber inputs and store them in an user object
    const userObj ={
        name: nameInput.value.trim(), //userName
        email: emailInput.value.trim(), //userEmail
        phoneNumber: phoneNumberInput.value //userPhoneNumber
    };
    //add the user to crudcrud.com
    axios
    .post("https://crudcrud.com/api/" + crudcrudEndpoint + "/appointmentData", userObj)
    .then((response) => {
        //display the user in DOM
        displayUser(response.data);
        //clear the input fields if the user is successfully submitted to crudcrud.com
        nameInput.value = '';
        emailInput.value = '';
        phoneNumberInput.value = '';
    })
    .catch((err) => {
        displayError('Error: Could not add the user details :(');
    });
}

//delete user details
function deleteUserDetails(e){
    //find the li whose delete button is clicked
    const li = e.target.parentElement;
    //remove the user from crudcrud.com
    axios
    .delete("https://crudcrud.com/api/" + crudcrudEndpoint + "/appointmentData/" + li.id)
    .then(() => { 
        //remove the user from the displayed list
        userList.removeChild(li);
    })
    .catch((err) => {
        displayError('Error: Could not delete the user details :(');
    });
}

//edit user details
function editUserDetails(e){
    //find the li whose edit button is clicked
    const li = e.target.parentElement;
    //the GET response of the current user details
    axios
    .get("https://crudcrud.com/api/" + crudcrudEndpoint + "/appointmentData/" + li.id)
    .then((response) => {
        //get the user object
        const userObj = response.data;
        //fill the user details to be edited in the input fields
        nameInput.value = userObj.name;
        emailInput.value = userObj.email;
        phoneNumberInput.value = userObj.phoneNumber;
        //remove the user from the displayed list
        userList.removeChild(li);
        //remove the storeUserDetails event on form submit
        form.removeEventListener('submit', storeUserDetails);
        //add the new editUserDetailsHelper event on form submit
        form.addEventListener('submit', editUserDetailsHelper);
    })
    .catch((err) => {
        displayError('Error: Could not get the user details :(');
    });

    function editUserDetailsHelper(e){
        e.preventDefault();
        //updated user object
        const updatedUserObj ={
            name: nameInput.value.trim(), //updated userName
            email: emailInput.value.trim(), //updated userEmail
            phoneNumber: phoneNumberInput.value //updated userPhoneNumber
        };
        //the PUT response of the updated user details
        axios
        .put("https://crudcrud.com/api/" + crudcrudEndpoint + "/appointmentData/" + li.id, updatedUserObj)
        .then(() => {
            //clear the input fields if the updated user is successfully submitted to crudcrud.com
            nameInput.value = '';
            emailInput.value = '';
            phoneNumberInput.value = '';
            //reload the webpage
            location.reload();
        })
        .catch((err) => {
            //remove the editUserDetailsHelper event on form submit
            form.removeEventListener('submit', editUserDetailsHelper);
            //display the error
            displayError('Error: Could not update the user deatils :(');
            //reload the webpage after showing the error
            setTimeout(() => { location.reload(); }, 3000);
        })
    }
} 

//display all the users stored in crudcrud.com when webpage is reloaded
function displayAllUsers(){
    axios
    .get("https://crudcrud.com/api/" + crudcrudEndpoint + "/appointmentData")
    .then((response) => {
        response.data.forEach((userObj) => {
            displayUser(userObj);
        });
    })
    .catch((err) => {
        displayError('Error: Could not get the users details :(');
    });
}

//display user stored in crudcrud.com based on the user object passed
function displayUser(userObj){
    //create new list item
    const li = document.createElement('li');
    //set the class of li 
    li.className = 'item';
    //the id of li must be the same as _id (generated by crudcrud.com) of userObj
    li.id = userObj._id;
    //append textnode with the value of userName, userEmail, userPhoneNumber to li
    li.appendChild(document.createTextNode(userObj.name + ' : ' + userObj.email + ' : ' + userObj.phoneNumber));
    
    //create edit button
    const editBtn = document.createElement('button');
    //set the class of edit button
    editBtn.className = 'edit';
    //append textnode to edit button
    editBtn.appendChild(document.createTextNode('Edit'));
    //add event listener on edit button
    editBtn.addEventListener('click', editUserDetails);
    //append edit button to li
    li.appendChild(editBtn);

    //create delete button
    const deleteBtn = document.createElement('button');
    //set the class of delete button
    deleteBtn.className = 'delete';
    //append textnode to delete button
    deleteBtn.appendChild(document.createTextNode('Delete'));
    //add event listener on delete button
    deleteBtn.addEventListener('click', deleteUserDetails);
    //append delete button to li
    li.appendChild(deleteBtn);

    //append li to ul
    userList.appendChild(li);
}

//displays error message in DOM
function displayError(msg){
    //create a new h4 element
    const err = document.createElement('h4');
    //add error message text to the h4 element
    err.appendChild(document.createTextNode(msg));
    //append the h4 to error message
    errorMessage.appendChild(err);
    //error message disappears after 3000ms
    setTimeout(() => { errorMessage.innerHTML = '' }, 3000);
}

/* EVENT LISTENERS */

//display all users event
window.addEventListener('DOMContentLoaded', displayAllUsers);
//Form submit event
form.addEventListener('submit', storeUserDetails);
